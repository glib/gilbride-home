---
import BaseLayout from '../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';

// Date formatting utility
function formatDate(date: Date): string {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
}

const posts = await Promise.all(
  (await getCollection('blog', ({ data }) => import.meta.env.PROD ? !data.draft : true))
    .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
    .map(async (post) => {
      const { Content } = await post.render();
      return { ...post, Content };
    })
);

// Get all unique tags
const allTags = [...new Set(posts.flatMap(post => post.data.tags || []))].sort();
---

<BaseLayout 
  title="Work From Loam - Remote Work & Mountain Biking"
  description="A blog and YouTube channel about remote work in tech, game development, and mountain biking adventures."
>
  <nav class="bg-slate-900 border-b border-slate-700 sticky top-0 z-10">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-center py-4">
        <a href="/" class="flex items-center gap-2 sm:gap-3 touch-manipulation">
          <svg class="w-12 h-12 sm:w-16 sm:h-16 text-emerald-400" fill="currentColor" viewBox="0 0 32 24">
            <!-- Laptop mountain base -->
            <path d="M4 14 L16 6 L28 14 L26 18 L6 18 Z" fill="currentColor" opacity="0.3"/>
            <!-- Laptop screen (folded down) -->
            <rect x="8" y="16" width="16" height="2" rx="1" fill="currentColor" opacity="0.5"/>
            <!-- Laptop keyboard area -->
            <rect x="10" y="18" width="12" height="1" rx="0.5" fill="currentColor" opacity="0.4"/>
            
            <!-- Mountain bike -->
            <!-- Rear wheel -->
            <circle cx="8" cy="12" r="2.5" fill="none" stroke="currentColor" stroke-width="0.8"/>
            <circle cx="8" cy="12" r="0.3" fill="currentColor"/>
            <!-- Front wheel -->
            <circle cx="20" cy="12" r="2.5" fill="none" stroke="currentColor" stroke-width="0.8"/>
            <circle cx="20" cy="12" r="0.3" fill="currentColor"/>
            
            <!-- Bike frame -->
            <path d="M8 12 L12 8 L16 8 L20 12" fill="none" stroke="currentColor" stroke-width="1.2" stroke-linecap="round"/>
            <path d="M8 12 L12 8 L8 8" fill="none" stroke="currentColor" stroke-width="1.2" stroke-linecap="round"/>
            <path d="M16 8 L18 10 L20 12" fill="none" stroke="currentColor" stroke-width="1.2" stroke-linecap="round"/>
            
            <!-- Handlebars -->
            <path d="M15 7 L17 7" stroke="currentColor" stroke-width="1.2" stroke-linecap="round"/>
            <!-- Seat -->
            <path d="M10 7 L12 7" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
            
            <!-- Rider (simple) -->
            <circle cx="13" cy="6" r="1" fill="currentColor" opacity="0.8"/>
            <path d="M13 7 L13 9" stroke="currentColor" stroke-width="1" stroke-linecap="round"/>
          </svg>
          <div>
            <h1 class="text-base sm:text-lg lg:text-xl xl:text-2xl font-heading font-bold text-emerald-300">Work From Loam</h1>
            <p class="text-xs sm:text-sm text-slate-400 mt-0.5 sm:mt-1">Remote Work, Code & Mountain Biking</p>
          </div>
        </a>
        <div class="flex space-x-3 sm:space-x-6">
          <a href="/" class="text-emerald-300 font-medium text-sm sm:text-base">Posts</a>
          <a href="/about" class="text-slate-300 hover:text-emerald-400 transition-colors font-medium text-sm sm:text-base">About</a>
          <a href="https://youtube.com/@workfromloam" target="_blank" rel="noopener" class="text-slate-300 hover:text-emerald-400 transition-colors font-medium flex items-center gap-1 text-sm sm:text-base">
            <svg class="w-3 h-3 sm:w-4 sm:h-4" viewBox="0 0 24 24">
              <path fill="#FF0000" d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814z"/>
              <path fill="#FFFFFF" d="M9.545 15.568V8.432L15.818 12l-6.273 3.568z"/>
            </svg>
            <span class="hidden sm:inline">YouTube</span>
          </a>
        </div>
      </div>
    </div>
  </nav>

  <main class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="flex flex-col lg:flex-row gap-8">
      <!-- Posts List -->
      <div class="flex-1 lg:max-w-4xl space-y-8 lg:space-y-16">
      {posts.map((post) => (
        <article 
          class="post-card border-b border-slate-600 pb-8 lg:pb-12 last:border-b-0 border-l-4 border-l-emerald-500 pl-4 lg:pl-6"
          data-tags={JSON.stringify(post.data.tags || [])}
        >
          {(post.data.youtubeId || post.data.heroImage) && (
            <a href={`/blog/${post.slug}/`} class="relative mb-6 aspect-video block group touch-manipulation">
              <img
                class="w-full h-full object-cover rounded-lg transition-transform group-hover:scale-105"
                src={post.data.heroImage || `https://img.youtube.com/vi/${post.data.youtubeId}/maxresdefault.jpg`}
                alt={post.data.title}
              />
              {post.data.youtubeId && (
                <div class="absolute inset-0 flex items-center justify-center pointer-events-none">
                  <div class="bg-black bg-opacity-60 rounded-full p-3 sm:p-4 transition-all group-hover:bg-opacity-80 group-hover:scale-110 pointer-events-none">
                    <svg class="w-6 h-6 sm:w-8 sm:h-8 text-white ml-0.5 sm:ml-1" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M8 5v14l11-7z"/>
                    </svg>
                  </div>
                </div>
              )}
            </a>
          )}
          
          <div class="space-y-4">
            <h2 class="text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-heading font-bold text-slate-100 leading-tight" style="letter-spacing: -0.02em;">
              <a href={`/blog/${post.slug}/`} class="hover:text-emerald-400 transition-colors">
                {post.data.title}
              </a>
            </h2>
            
            <div class="flex items-center gap-3 text-sm text-slate-400">
              <time datetime={post.data.pubDate.toISOString()}>
                {formatDate(post.data.pubDate)}
              </time>
              {(post.data.tags || []).length > 0 && (
                <>
                  <span>â€¢</span>
                  <div class="flex flex-wrap gap-1">
                    {(post.data.tags || []).map((tag) => (
                      <span class="text-orange-400 text-xs font-medium">
                        #{tag}
                      </span>
                    ))}
                  </div>
                </>
              )}
            </div>
            
            <div class="text-slate-300 text-lg leading-relaxed prose prose-lg prose-invert max-w-none prose-headings:text-slate-100 prose-headings:font-heading prose-a:text-emerald-400 prose-a:no-underline hover:prose-a:text-emerald-300 prose-code:text-slate-200 prose-code:bg-orange-900/30 prose-code:px-1 prose-code:py-0.5 prose-code:rounded prose-pre:bg-slate-900 prose-pre:text-slate-100">
              <post.Content />
            </div>
            <div class="mt-4 text-slate-400 text-sm italic">
              Continue reading for more details...
            </div>
            
            <div class="pt-2">
              <a
                href={`/blog/${post.slug}/`}
                class="inline-flex items-center text-emerald-400 hover:text-emerald-300 font-medium transition-colors group"
              >
                Read full article
                <svg class="w-4 h-4 ml-1 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                </svg>
              </a>
            </div>
          </div>
        </article>
      ))}
      </div>

      <!-- Tag Filter Sidebar -->
      <aside class="w-full lg:w-64 lg:sticky lg:top-24 h-fit order-first lg:order-last mb-6 lg:mb-0">
        <div class="bg-slate-800/50 lg:bg-slate-700 rounded-lg p-3 lg:p-6 border border-slate-700/50 lg:border-slate-600">
          <h3 class="text-base lg:text-lg font-heading font-medium lg:font-semibold text-slate-200 lg:text-slate-100 mb-3 lg:mb-4">Filter by Topic</h3>
          
          <div class="flex flex-wrap gap-2 lg:space-y-3 lg:flex-col lg:gap-0">
            <button 
              class="tag-filter active px-3 py-1 lg:py-2 rounded-md text-xs lg:text-sm font-medium bg-emerald-600/80 lg:bg-emerald-600 text-emerald-100 hover:bg-emerald-500 transition-colors lg:w-full lg:text-left"
              data-tag="all"
            >
              All Posts
            </button>
            
            {allTags.map((tag) => (
              <button 
                class="tag-filter px-3 py-1 lg:py-2 rounded-md text-xs lg:text-sm text-slate-300 hover:bg-orange-900/30 hover:text-orange-300 transition-colors lg:w-full lg:text-left"
                data-tag={tag}
              >
                #{tag}
              </button>
            ))}
          </div>
        </div>
      </aside>
    </div>
  </main>


  <script>
    // Tag filtering functionality
    document.addEventListener('DOMContentLoaded', function() {
      const tagButtons = document.querySelectorAll('.tag-filter');
      const postCards = document.querySelectorAll('.post-card');
      
      tagButtons.forEach(button => {
        button.addEventListener('click', function() {
          const selectedTag = this.dataset.tag;
          
          // Update button states
          tagButtons.forEach(btn => {
            btn.classList.remove('active', 'bg-emerald-600', 'text-emerald-100');
            btn.classList.add('text-slate-300');
          });
          
          this.classList.remove('text-slate-300');
          this.classList.add('active', 'bg-emerald-600', 'text-emerald-100');
          
          // Filter posts
          postCards.forEach(card => {
            const postTags = JSON.parse(card.dataset.tags);
            
            if (selectedTag === 'all' || postTags.includes(selectedTag)) {
              card.style.display = 'block';
            } else {
              card.style.display = 'none';
            }
          });
        });
      });
    });
  </script>
</BaseLayout>
