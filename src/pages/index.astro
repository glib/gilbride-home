---
import BaseLayout from '../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';

// Date formatting utility
function formatDate(date: Date): string {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
}

const posts = (await getCollection('blog'))
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Get all unique tags
const allTags = [...new Set(posts.flatMap(post => post.data.tags || []))].sort();
---

<BaseLayout 
  title="Work From Loam - Remote Work & Mountain Biking"
  description="A blog and YouTube channel about remote work in tech, game development, and mountain biking adventures."
>
  <nav class="bg-slate-50 border-b border-slate-200 sticky top-0 z-10">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-center py-4">
        <div class="flex items-center gap-3">
          <svg class="w-16 h-16 text-green-700" fill="currentColor" viewBox="0 0 32 24">
            <!-- Laptop mountain base -->
            <path d="M4 14 L16 6 L28 14 L26 18 L6 18 Z" fill="currentColor" opacity="0.3"/>
            <!-- Laptop screen (folded down) -->
            <rect x="8" y="16" width="16" height="2" rx="1" fill="currentColor" opacity="0.5"/>
            <!-- Laptop keyboard area -->
            <rect x="10" y="18" width="12" height="1" rx="0.5" fill="currentColor" opacity="0.4"/>
            
            <!-- Mountain bike -->
            <!-- Rear wheel -->
            <circle cx="8" cy="12" r="2.5" fill="none" stroke="currentColor" stroke-width="0.8"/>
            <circle cx="8" cy="12" r="0.3" fill="currentColor"/>
            <!-- Front wheel -->
            <circle cx="20" cy="12" r="2.5" fill="none" stroke="currentColor" stroke-width="0.8"/>
            <circle cx="20" cy="12" r="0.3" fill="currentColor"/>
            
            <!-- Bike frame -->
            <path d="M8 12 L12 8 L16 8 L20 12" fill="none" stroke="currentColor" stroke-width="1.2" stroke-linecap="round"/>
            <path d="M8 12 L12 8 L8 8" fill="none" stroke="currentColor" stroke-width="1.2" stroke-linecap="round"/>
            <path d="M16 8 L18 10 L20 12" fill="none" stroke="currentColor" stroke-width="1.2" stroke-linecap="round"/>
            
            <!-- Handlebars -->
            <path d="M15 7 L17 7" stroke="currentColor" stroke-width="1.2" stroke-linecap="round"/>
            <!-- Seat -->
            <path d="M10 7 L12 7" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
            
            <!-- Rider (simple) -->
            <circle cx="13" cy="6" r="1" fill="currentColor" opacity="0.8"/>
            <path d="M13 7 L13 9" stroke="currentColor" stroke-width="1" stroke-linecap="round"/>
          </svg>
          <div>
            <h1 class="text-2xl font-heading font-bold text-green-800">Work From Loam</h1>
            <p class="text-sm text-slate-600 mt-1">Remote Work, Code & Mountain Biking</p>
          </div>
        </div>
        <div class="flex space-x-6">
          <a href="/" class="text-green-800 font-medium">Posts</a>
          <a href="/about" class="text-slate-600 hover:text-green-700 transition-colors font-medium">About</a>
          <a href="https://youtube.com/@workfromloam" target="_blank" rel="noopener" class="text-slate-600 hover:text-green-700 transition-colors font-medium flex items-center gap-1">
            <svg class="w-4 h-4" viewBox="0 0 24 24">
              <path fill="#FF0000" d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814z"/>
              <path fill="#FFFFFF" d="M9.545 15.568V8.432L15.818 12l-6.273 3.568z"/>
            </svg>
            YouTube
          </a>
        </div>
      </div>
    </div>
  </nav>

  <main class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="flex gap-8">
      <!-- Posts List -->
      <div class="flex-1 max-w-4xl space-y-12">
      {posts.map((post) => (
        <article 
          class="post-card border-b border-slate-200 pb-12 last:border-b-0"
          data-tags={JSON.stringify(post.data.tags || [])}
        >
          {(post.data.youtubeId || post.data.heroImage) && (
            <div class="relative mb-6 aspect-video">
              <img
                class="w-full h-full object-cover rounded-lg"
                src={post.data.heroImage || `https://img.youtube.com/vi/${post.data.youtubeId}/maxresdefault.jpg`}
                alt={post.data.title}
              />
              {post.data.youtubeId && (
                <div class="absolute inset-0 flex items-center justify-center">
                  <div class="bg-black bg-opacity-60 rounded-full p-4">
                    <svg class="w-8 h-8 text-white ml-1" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M8 5v14l11-7z"/>
                    </svg>
                  </div>
                </div>
              )}
            </div>
          )}
          
          <div class="space-y-4">
            <div class="flex flex-wrap gap-2">
              {(post.data.tags || []).map((tag) => (
                <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-amber-100 text-amber-900">
                  #{tag}
                </span>
              ))}
            </div>
            
            <h2 class="text-3xl md:text-4xl font-heading font-bold text-slate-900 leading-tight">
              <a href={`/blog/${post.slug}/`} class="hover:text-green-700 transition-colors">
                {post.data.title}
              </a>
            </h2>
            
            <time class="text-sm text-slate-500 block" datetime={post.data.pubDate.toISOString()}>
              {formatDate(post.data.pubDate)}
            </time>
            
            <p class="text-slate-700 text-lg leading-relaxed">
              {post.data.description}
            </p>
            
            <div class="pt-2">
              <a
                href={`/blog/${post.slug}/`}
                class="inline-flex items-center text-green-700 hover:text-green-800 font-medium transition-colors group"
              >
                Read full article
                <svg class="w-4 h-4 ml-1 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                </svg>
              </a>
            </div>
          </div>
        </article>
      ))}
      </div>

      <!-- Tag Filter Sidebar -->
      <aside class="w-64 sticky top-24 h-fit">
        <div class="bg-slate-50 rounded-lg p-6 border border-slate-200">
          <h3 class="text-lg font-heading font-semibold text-slate-900 mb-4">Filter by Topic</h3>
          
          <div class="space-y-3">
            <button 
              class="tag-filter active w-full text-left px-3 py-2 rounded-md text-sm font-medium bg-green-100 text-green-800 hover:bg-green-200 transition-colors"
              data-tag="all"
            >
              All Posts
            </button>
            
            <div class="space-y-2">
              {allTags.map((tag) => (
                <button 
                  class="tag-filter w-full text-left px-3 py-2 rounded-md text-sm text-slate-600 hover:bg-slate-100 hover:text-slate-900 transition-colors"
                  data-tag={tag}
                >
                  #{tag}
                </button>
              ))}
            </div>
          </div>
        </div>
      </aside>
    </div>
  </main>

  <style>
    .line-clamp-4 {
      display: -webkit-box;
      -webkit-line-clamp: 4;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
  </style>

  <script>
    // Tag filtering functionality
    document.addEventListener('DOMContentLoaded', function() {
      const tagButtons = document.querySelectorAll('.tag-filter');
      const postCards = document.querySelectorAll('.post-card');
      
      tagButtons.forEach(button => {
        button.addEventListener('click', function() {
          const selectedTag = this.dataset.tag;
          
          // Update button states
          tagButtons.forEach(btn => {
            btn.classList.remove('active', 'bg-green-100', 'text-green-800');
            btn.classList.add('text-slate-600');
          });
          
          this.classList.remove('text-slate-600');
          this.classList.add('active', 'bg-green-100', 'text-green-800');
          
          // Filter posts
          postCards.forEach(card => {
            const postTags = JSON.parse(card.dataset.tags);
            
            if (selectedTag === 'all' || postTags.includes(selectedTag)) {
              card.style.display = 'block';
            } else {
              card.style.display = 'none';
            }
          });
        });
      });
    });
  </script>
</BaseLayout>
